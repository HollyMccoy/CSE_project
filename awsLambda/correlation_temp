# use a role with dynamodb full access
import json
import boto3
import datetime

from boto3.dynamodb.conditions import Key

dynamodb = boto3.resource('dynamodb')
class_table = dynamodb.Table('soundclassifications')
correlate_table = dynamodb.Table('sound_correlations')





def query(date):
   
    response = class_table.query(
        ProjectionExpression="#dt, UTC, deviceID, soundID",
        ExpressionAttributeNames={"#dt": "date"},
        KeyConditionExpression=Key('date').eq(date) # &  Key('deviceID').eq(deviceID) 
    )
    
    return response['Items']




def lambda_handler(event, context):
    returned = ""
    UTC ="03:00:12" # datetime.datetime.now().strftime("%H:%M:%S")
    
    date = datetime.date.today().strftime("%m/%d/%y")
    
    
    print(f"Classes from -{date}-")
    classes = query(date) 
   
    for i in range(len(classes)):
        
        for j in range(i+1,len(classes)):
            
            if ( classes[i]['UTC'][0:6] == classes[j]['UTC'][0:6] and abs( int( classes[j]['UTC'][6:8]) - int( classes[i]['UTC'][6:8]) ) < 3  and  classes[i]['deviceID'][0:4] == classes[j]['deviceID'][0:4] and classes[i]['deviceID'] != classes[j]['deviceID'] ):
                if ( classes[i]['soundID'] == classes[j]['soundID'] ):
                    same_sound = True 
                else : same_sound = False
                deviceID =  classes[i]["deviceID"][0:6]
                date =  classes[i]["date"]
                UTC = classes[i]["UTC"] + " " + classes[j]["UTC"]
                soundID = classes[i]["soundID"]  + " " + classes[j]["soundID"]
                Item = {
                    "roomID": deviceID,
                    "date" : date,
                    "UTC": UTC,
                    "soundID" : soundID,
                    "same_sound" :same_sound
                }

                correlate_table.put_item(Item=Item)
            

    return {"code":200,"message":"Sound added successfully"
    }
